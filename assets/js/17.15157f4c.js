(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{344:function(t,s,e){"use strict";e.r(s);var a=e(0),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"gitflow工作流介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitflow工作流介绍"}},[t._v("#")]),t._v(" Gitflow工作流介绍")]),t._v(" "),e("p",[t._v("Gitflow工作流仍然用中央仓库作为所有开发者的交互中心，这和其它git的工作流一样，开发者在本地开发并push分支到要中央仓库中。Gitflow工作流定义了一个围绕项目发布的严格分支模型，它提供了用于一个健壮的用于管理大型项目的框架。")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211204806.png",alt:""}})]),t._v(" "),e("p",[t._v("Gitflow工作流没有用超出"),e("strong",[t._v("功能分支工作流")]),t._v("的概念和命令，它为不同的分支分配一个很明确的角色，并定义分支之间在什么时候怎样进行交互。下面对各个分支的作用进行说明，也有一个例子用来介绍分支之间具体如何交互。")]),t._v(" "),e("h2",{attrs:{id:"历史分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#历史分支"}},[t._v("#")]),t._v(" 历史分支")]),t._v(" "),e("p",[t._v("Gitflow工作流使用2个分支来记录项目的历史。master分支存储了正式发布的历史，而develop分支作为功能的集成分支。这样也方便master分支上的所有提交分配一个版本号。")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211205318.png",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"功能分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能分支"}},[t._v("#")]),t._v(" 功能分支")]),t._v(" "),e("p",[t._v("每个新功能都有一个自己的专属分支，这样可以push到中央仓库备份和协作。但功能分支并不是基于master而创建的分支，而是使用develop分支作为父分支。当新功能完成时需要合并回develop分支，它不应该直接与master交互。")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211205351.png",alt:""}})]),t._v(" "),e("p",[t._v("最佳实践：")]),t._v(" "),e("ul",[e("li",[t._v("基于 "),e("strong",[t._v("develop")]),t._v(" 发展")]),t._v(" "),e("li",[t._v("必须合并回到 "),e("strong",[t._v("develop")])]),t._v(" "),e("li",[t._v("分支命名规范 "),e("strong",[t._v("master")]),t._v("，"),e("strong",[t._v("develop")]),t._v("， "),e("strong",[t._v("feature/xxx")]),t._v("，"),e("strong",[t._v("release/xxx")]),t._v("，"),e("strong",[t._v("hotfix/xxx")])])]),t._v(" "),e("h2",{attrs:{id:"发布分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布分支"}},[t._v("#")]),t._v(" 发布分支")]),t._v(" "),e("p",[t._v("当develop分支上有做了一次合并或者是积攒了足够功能，就从develop分支上fork一个发布分支。新建的这个分支用于发布代码，所以从这个时间点开始之后新的功能不能再加到这个分支上，这个分支只能修改Bug和其它面向发布的任务。一旦对外发布的工作都完成了，发布分支合并到master分支并分配一个版本号打好Tag。另外，这些从新建发布分支以来的做的修改要合并回develop分支。")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211205530.png",alt:""}})]),t._v(" "),e("p",[t._v("使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。")]),t._v(" "),e("p",[t._v("这也制定了一个良好的开发阶段（比如，可以很轻松地说『这周我们要准备发布版本4.0』），并且在仓库的目录结构中可以实际看到")]),t._v(" "),e("h2",{attrs:{id:"维护分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#维护分支"}},[t._v("#")]),t._v(" 维护分支")]),t._v(" "),e("p",[t._v("维护分支或说是热修复（hotfix）分支用于生成快速给产品发布版本（production releases）打补丁，这是唯一可以直接从master分支fork出来的分支。修复完成，修改应该马上合并回master分支和develop分支（当前的发布分支），master分支应该用新的版本号打好Tag。")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211205617.png",alt:""}})]),t._v(" "),e("p",[t._v("为Bug修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把维护分支想成是一个直接在master分支上处理的临时发布。")]),t._v(" "),e("h1",{attrs:{id:"实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),e("p",[t._v("​\t\t下面的示例演示本工作流如何用于管理单个发布循环。假设你已经创建了一个中央仓库，我们模拟几位同事运用gitflow工作流协作。")]),t._v(" "),e("h2",{attrs:{id:"创建开发分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建开发分支"}},[t._v("#")]),t._v(" 创建开发分支")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211210646.png",alt:""}})]),t._v(" "),e("p",[t._v("基于master分支创建一个develop分支。可以先在本地创建一个空的develop分支，然后push到服务器上：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch develop\ngit push -u origin develop\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("以后这个分支将会包含了项目的全部历史，而master分支将只包含了部分历史。其它开发者这时应该克隆中央仓库，建好develop分支的跟踪分支（即本地develop与远程develop进行关联）：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone ssh://user@host/path/to/repo.git\ngit checkout -b develop origin/develop\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("上面由项目管理者操作即可，而每个开发人员应该从下面的流程开始，我们假充有两位同事：张三和李四。")]),t._v(" "),e("h2",{attrs:{id:"开发者开发各自的新功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发者开发各自的新功能"}},[t._v("#")]),t._v(" 开发者开发各自的新功能")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211210829.png",alt:""}})]),t._v(" "),e("p",[t._v("这两位同事负责开发独立的功能，首先他们需要为各自的功能创建相应的分支。新分支不是基于master分支，而应该基于develop分支：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 张三\ngit checkout -b 0.1.0 develop\n\n# 李四\ngit checkout -b 0.1.1 develop\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("他们在各自创建的分支上编写代码，在开发过程中陆续有代码提交到本地仓库的功能分支。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git status\ngit add --all\ngit commit -m 'something...'\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("h2",{attrs:{id:"张三完成功能开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#张三完成功能开发"}},[t._v("#")]),t._v(" 张三完成功能开发")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211210948.png",alt:""}})]),t._v(" "),e("p",[t._v("张三在开发过程中会有多次提交，当他确认功能开发完毕后可以直接合并到本地的develop分支，并且push到中央仓库。如果团队使用Pull Requests，这时候也可以发起一个用于合并变更到develop分支申请。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git pull origin develop\ngit checkout develop\ngit merge 0.1.0\ngit push\ngit branch -d 0.1.0\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("第一条命令确保在合并前develop分支是最新的。要特别注意的是功能分支上的代码决不应该直接合并到master分支。在合并过程中可能会有冲突，解决方法的思路和SVN是类似的。")]),t._v(" "),e("h2",{attrs:{id:"张三开始准备发布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#张三开始准备发布"}},[t._v("#")]),t._v(" 张三开始准备发布")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211211125.png",alt:""}})]),t._v(" "),e("p",[t._v("这个时候李四还在实现他的功能，张三已经准备他第一个项目正式发布。像功能开发一样，他用一个新的分支来做发布准备。这一步也确定了发布的版本号：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout -b release-0.1.0 develop\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("这个分支是清理发布、执行所有测试、更新文档和其它为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。只要张三创建这个分支并push到中央仓库，这个发布就是功能冻结的。任何不在develop分支中的新功能都推到下个发布循环中。")]),t._v(" "),e("h2",{attrs:{id:"张三完成发布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#张三完成发布"}},[t._v("#")]),t._v(" 张三完成发布")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211211304.png",alt:""}})]),t._v(" "),e("p",[t._v("一旦准备好了对外发布，张三合并修改到master分支和develop分支上，并且删除发布分支。合并回develop分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也是必须的。另外，如果张三的团队要求Code Review，这是一个发起Pull Request的理想时机。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout master\ngit merge release-0.1.0\ngit push\ngit checkout develop\ngit merge release-0.1.0\ngit push\ngit branch -d release-0.1.0\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("发布分支是作为功能开发（develop分支）和对外发布（master分支）间的缓冲。只要有合并到master分支，就应该打好Tag以方便跟踪。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git tag -a v0.1.0 -m "Initial public release" master\ngit push --tags\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("Git有提供各种勾子（hook），即仓库有事件发生时触发执行的脚本。可以配置一个勾子，在你push中央仓库的master分支时，自动构建好对外发布。")]),t._v(" "),e("h2",{attrs:{id:"用户发现bug"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户发现bug"}},[t._v("#")]),t._v(" 用户发现Bug")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://github.img.junwangit.com/img/20200211211451.png",alt:""}})]),t._v(" "),e("p",[t._v("版本对外发布后，张三回去和李四一起做下个版本的新功能开发，直到有用户开了一个Ticket抱怨当前版本的一个Bug。为了处理Bug，张三（或李四）从master分支上拉出了一个维护分支，提交修改以解决问题，然后直接合并回master分支：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout -b issue-#001 master\n# Fix the bug\ngit checkout master\ngit merge issue-#001\ngit push\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("就像发布分支，维护分支中新加这些重要修改需要包含到develop分支中，所以张三要执行一个合并操作。然后就可以安全地删除这个分支了：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout develop\ngit merge issue-#001\ngit push\ngit branch -d issue-#001\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h2",{attrs:{id:"可视化客户端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可视化客户端"}},[t._v("#")]),t._v(" 可视化客户端")]),t._v(" "),e("ul",[e("li",[t._v("Sourcetree ("),e("a",{attrs:{href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),e("OutboundLink")],1),t._v(")")]),t._v(" "),e("li",[t._v("TortoiseGit （"),e("a",{attrs:{href:"https://tortoisegit.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),e("OutboundLink")],1),t._v("）")])])])}),[],!1,null,null,null);s.default=r.exports}}]);